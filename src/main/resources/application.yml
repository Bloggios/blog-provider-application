server:
  port: 7004
  servlet:
    context-path: /blog-provider
spring:
  servlet:
    multipart:
      max-file-size: 100MB
  application:
    name: blog-provider-application
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.bloggios.user
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT:5432}/${POSTGRES_DATABASE}?currentSchema=blog-provider
    hikari:
      username: ${POSTGRES_USERNAME}
      password: ${POSTGRES_PASSWORD}
      maximum-pool-size: ${POSTGRES_POOL_SIZE:100}
      minimum-idle: ${POSTGRES_IDLE:7}
      leak-detection-threshold: 120000
      max-lifetime: 1800000
      idle-timeout: 600000
      connection-timeout: 600000
  jpa:
    hibernate:
      ddl-auto: update

application:
  version: @version@
  profile: ${ACTIVE_PROFILE}
  base-path: ${BASE_PATH}
  environment:
    assets: https://assets.bloggios.in/blog-provider

elasticsearch:
  server: ${ES_SERVER:localhost}
  username: ${ES_USERNAME:root}
  password: ${ES_PASSWORD:root}
  indices:
    blog: ${ACTIVE_PROFILE:local}.blog-provider.blog
    chapter: ${ACTIVE_PROFILE:local}.blog-provider.chapter
    like: ${ACTIVE_PROFILE:local}.blog-provider.like

eureka:
  instance:
    hostname: localhost
  client:
    service-url:
      defaultZone: ${EUREKA_URL}
    enabled: false
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: prometheus

security-config:
  exclude:
    paths:
      - /actuator/**
      - /topics/**
      - /unauth/**
      - /api/v1/auth/**"
      - /v2/api-docs
      - /swagger-resources
      - /swagger-resources/**
      - /configuration/ui
      - /configuration/security
      - /swagger-ui/**
      - /webjars/**
      - /swagger-ui.html
      - /v3/api-docs
      - /v3/api-docs/**
  cookie:
    cookie-name: ${ACTIVE_PROFILE:local}.bg-refresh-mgmt
    paths:
      - /user-provider/profile-auth/**
  key-provider:
    public-key: classpath:security/pubkey.pem
    private-key: classpath:security/privkey.pem

blog-files:
  blog-images: ${BLOG_IMAGES_PATH:files/blog-provider/blog}
  cover-images: ${COVER_IMAGES_PATH:files/blog-provider/cover}

swagger-properties:
  group-name:
    definition: ${spring.application.name}
    scan-packages: com.bloggios.blog
  info:
    title: Bloggios - Blog Provider Application
    version: @version@
    description: API Documentation for blog-provider-application
    summary: The Blog Provider Application, developed using Java 17 and Spring Boot, serves as a comprehensive backend microservice for Bloggios. It offers a full suite of blogging features, including commenting, likes, and more, to enhance user engagement and content management.
    contact:
      name: Bloggios
      email: support@bloggios.com
      url: https://www.bloggios.com
    license:
      name: Apache 2 License
      url: https://github.com/Bloggios/blog-provider-application/blob/main/LICENSE
  servers:
    local:
      name: Local Port
      url: http://localhost:${server.port}/blog-provider
    production:
      name: Hosted Port
      url: https://api.bloggios.com/blog-provider